---
swagger: "2.0"
info:
  description: "\
    [solved.ac](https://solved.ac/) 의 비공식 API 문서입니다. \
    원작자의 요청에 따라 언제든지 지워질 수 있으며, \
    문서의 내용은 현재 API와 일치하지 않을 수 있습니다. \
    "
  version: "2020-06.1"
  title: "solved.ac"
  contact:
    email: "public.ranolp@gmail.com"
host: "api.solved.ac"
basePath: "/v2"
tags:
  - name: "기타"
    description: "아직 분류하지 못한 API입니다"
  - name: "사용자"
    description: "사용자와 관련이 있는 API입니다"
schemes:
  - "https"
paths:
  /search/recommendations.json:
    get:
      tags:
        - "기타"
      summary: "주어진 쿼리에 따라 백준 문제를 검색합니다."
      description: ""
      parameters:
        - name: "query"
          in: "query"
          description: "쿼리 문자열"
          required: true
          type: "string"
      responses:
        200:
          description: "서버가 반환에 성공한 경우입니다."
          schema:
            type: "object"
            properties:
              success:
                description: "요청 성공 여부입니다."
                type: "boolean"
                example: true
              result:
                type: "object"
                properties:
                  autocomplete:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                  problems:
                    description: "검색해서 찾은 백준 문제 목록입니다."
                    type: "array"
                    items:
                      $ref: "#/definitions/Problem"
                  problem_count:
                    description: "검색해서 찾은 백준 문제 수입니다."
                    type: "integer"
                    format: "int64"
                    example: 1
                  users:
                    description: "검색해서 찾은 사용자 목록입니다."
                    type: "array"
                    items:
                      $ref: "#/definitions/User"
                  user_count:
                    description: "검색해서 찾은 사용자 수입니다."
                    type: "integer"
                    format: "int64"
                    example: 1
                  algorithms:
                    description: "검색해서 찾은 알고리즘 목록입니다."
                    type: "array"
                    items:
                      $ref: "#/definitions/Algorithm"
                  algorithm_count:
                    description: "검색해서 찾은 알고리즘 수입니다."
                    type: "integer"
                    format: "int64"
                    example: 1
                  wiki_articles:
                    description: "검색해서 찾은 위키 글 목록입니다."
                    type: "array"
                    items:
                      $ref: "#/definitions/WikiArticle"
  /site/statistics.json:
    get:
      tags:
        - "기타"
      summary: "solved.ac 통계를 가져옵니다."
      description: ""
      responses:
        200:
          description: "서버가 반환에 성공한 경우입니다."
          schema:
            type: "object"
            properties:
              success:
                description: "요청 성공 여부입니다."
                type: "boolean"
              result:
                type: "object"
                properties:
                  total_problems:
                    description: "여태까지 색인된 백준 문제 수입니다."
                    type: "integer"
                    format: "int64"
                    example: 16355
                  voted_problems:
                    description: "여태까지 투표된 백준 문제 수입니다."
                    type: "integer"
                    format: "int64"
                    example: 9742
                  total_voters:
                    description: "여태까지 투표한 사용자 수입니다."
                    type: "integer"
                    format: "int64"
                    example: 470
                  total_votes:
                    description: "여태까지 기록된 투표 수입니다."
                    type: "integer"
                    format: "int64"
                    example: 52085
  /users/problem_stats.json:
    get:
      tags:
        - "사용자"
      summary: "사용자가 푼 문제 개수를 레벨별로 가져옵니다."
      description: ""
      parameters:
        - name: "id"
          in: "query"
          description: "사용자 ID"
          required: true
          type: "string"
      responses:
        200:
          description: "서버가 반환에 성공한 경우입니다."
          schema:
            type: "object"
            properties:
              success:
                description: "요청 성공 여부입니다."
                type: "boolean"
                example: true
              result:
                type: "array"
                items:
                  type: "object"
                  properties:
                    level:
                      description: "문제의 레벨입니다."
                      type:
                        $ref: "#/definitions/Level"
                      example: 0
                    problems:
                      description: "solved.ac에 등록된 문제 수입니다."
                      type: "integer"
                      format: "int64"
                      example: 6456
                    solved:
                      description: "사용자가 푼 문제 수입니다."
                      type: "integer"
                      format: "int64"
                      example: 105
                    attempted:
                      description: "사용자가 시도해본 문제 수입니다."
                      type: "integer"
                      format: "int64"
                      example: 113
                    solved_exp_sum:
                      description: "사용자가 해당 레벨에서 획득한 경험치의 합입니다."
                      type: "integer"
                      format: "int64"
                      example: 33600
  /pet/{petId}/uploadImage:
    post:
      tags:
        - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet:
    post:
      tags:
        - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Pet"
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    put:
      tags:
        - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Pet"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet/findByStatus:
    get:
      tags:
        - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid status value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet/findByTags:
    get:
      tags:
        - "pet"
      summary: "Finds Pets by tags"
      description:
        "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid tag value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
        - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
        - api_key: []
    post:
      tags:
        - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the pet"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the pet"
          required: false
          type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    delete:
      tags:
        - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "petId"
          in: "path"
          description: "Pet id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /store/order:
    post:
      tags:
        - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the pet"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
        - "store"
      summary: "Find purchase order by ID"
      description:
        "For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of pet that needs to be fetched"
          required: true
          type: "integer"
          maximum: 10
          minimum: 1
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
        - "store"
      summary: "Delete purchase order by ID"
      description:
        "For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of the order that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /store/inventory:
    get:
      tags:
        - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
        - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
        - api_key: []
  /user/createWithArray:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
        - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
definitions:
  Level:
    description: "Unrated부터 Ruby I까지를 0 ~ 31로 표현하는 레벨입니다."
    type: "integer"
    format: "int64"
  Problem:
    type: "object"
    properties:
      id:
        description: "문제의 고유 번호입니다."
        type: "integer"
        format: "int64"
        example: 8481
      title:
        description: "문제의 제목입니다."
        type: "string"
        example: "Generator"
      level:
        description: "문제의 난이도입니다."
        type: "#/definitions/Level"
        format: "int64"
        example: 23
      solved:
        description: "문제를 푼 사람의 수입니다."
        type: "integer"
        format: "int64"
        example: 20
      caption:
        type: "string"
        example: "Generator"
      description:
        type: "string"
        example: "#8481"
      href:
        description: "문제로 가는 하이퍼링크입니다."
        type: "string"
        example: "https://www.acmicpc.net/problem/8481"
  User:
    type: "object"
    properties:
      user_id:
        description: "사용자명입니다."
        type: "string"
        example: "shiftpsh"
      bio:
        description: "사용자의 자기소개입니다."
        type: "string"
        example: "🧡 이곳의 개발자입니다."
      profile_image_url:
        description: "사용자의 프로필 사진으로 가는 하이퍼링크입니다."
        type: "string"
        example: "https://static.solved.ac/uploads/profile/0565b63f0b204e990d1b163018a1c358992519b8.png"
      solved:
        description: "사용자가 푼 문제 수입니다."
        type: "integer"
        format: "int64"
        example: 2412
      exp:
        description: "사용자가 여태까지 획득한 경험치량입니다."
        type: "integer"
        format: "int64"
        example: 498605585
      level:
        description: "사용자의 레벨입니다."
        type: "#/definitions/Level"
        example: 25
      class:
        description: "사용자가 취득한 Class입니다."
        type: "integer"
        format: "int64"
        example: 8
      class_decoration:
        description: "사용자가 취득한 Class의 수준입니다."
        type: "integer"
        format: "int64"
        example: 0
      vote_count:
        description: "사용자가 한 난이도 투표의 수입니다."
        type: "integer"
        format: "int64"
        example: 1417
      rank:
        description: "사용자의 solved.ac 순위입니다."
        type: "integer"
        format: "int64"
        example: 43
  Algorithm:
    type: "object"
    properties:
      tag_name:
        type: "string"
        example: "bitmask"
      full_name_en:
        type: "string"
        example: "Bitmask"
      full_name_ko:
        type: "string"
        example: "비트마스킹"
      problem_count:
        type: "integer"
        format: "int64"
        example: 150
      caption:
        type: "string"
        example: "tag:bitmask"
      description:
        type: "string"
        example: "150문제"
      href:
        type: "string"
        example: "/problems/tags/bitmask"
  WikiArticle:
    type: "object"
    properties:
      title:
        type: "string"
        example: "완전 탐색"
      caption:
        type: "string"
        example: "완전 탐색"
      description:
        type: "string"
        example: ""
      href:
        type: "string"
        example: "/wiki/w/완전 탐색"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Pet:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          wrapped: true
        items:
          type: "string"
          xml:
            name: "photoUrl"
      tags:
        type: "array"
        xml:
          wrapped: true
        items:
          xml:
            name: "tag"
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
    xml:
      name: "Order"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
